#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import aiohttp
import json
from typing import Dict, List, Optional
from datetime import datetime, timedelta

class VulnerabilityScanner:
    def __init__(self):
        self.nvd_api_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
        self.cache_file = "vuln_cache.json"
        self.cache_duration = timedelta(days=1)  # Cache süresi
        self.cache = self._load_cache()

    def _load_cache(self) -> Dict:
        """Cache dosyasını yükler"""
        try:
            with open(self.cache_file, 'r') as f:
                cache = json.load(f)
                # Cache'in geçerlilik kontrolü
                for key, data in list(cache.items()):
                    cache_time = datetime.fromisoformat(data['cache_time'])
                    if datetime.now() - cache_time > self.cache_duration:
                        del cache[key]
                return cache
        except (FileNotFoundError, json.JSONDecodeError):
            return {}

    def _save_cache(self):
        """Cache'i dosyaya kaydeder"""
        with open(self.cache_file, 'w') as f:
            json.dump(self.cache, f, indent=4)

    def _create_cache_key(self, product: str, version: str) -> str:
        """Cache anahtarı oluşturur"""
        return f"{product.lower()}:{version}"

    async def search_vulnerabilities(self, product: str, version: str) -> List[Dict]:
        """Belirli bir ürün ve versiyon için zafiyet arar"""
        cache_key = self._create_cache_key(product, version)

        # Cache kontrolü
        if cache_key in self.cache:
            cache_data = self.cache[cache_key]
            cache_time = datetime.fromisoformat(cache_data['cache_time'])
            if datetime.now() - cache_time <= self.cache_duration:
                return cache_data['vulnerabilities']

        # NVD API'den zafiyet bilgisi al
        async with aiohttp.ClientSession() as session:
            params = {
                'keywordSearch': f"{product} {version}",
                'keywordExactMatch': True
            }

            try:
                async with session.get(self.nvd_api_url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        vulnerabilities = []

                        for vuln in data.get('vulnerabilities', []):
                            cve = vuln.get('cve', {})
                            metrics = cve.get('metrics', {}).get('cvssMetrics', [{}])[0]

                            vulnerability = {
                                'cve_id': cve.get('id'),
                                'description': cve.get('descriptions', [{}])[0].get('value', ''),
                                'published': cve.get('published'),
                                'severity': metrics.get('severity', 'UNKNOWN'),
                                'score': metrics.get('baseScore', 0.0),
                                'cwe': cve.get('weaknesses', [{}])[0].get('description', [{}])[0].get('value', 'N/A')
                            }
                            vulnerabilities.append(vulnerability)

                        # Sonuçları cache'e kaydet
                        self.cache[cache_key] = {
                            'cache_time': datetime.now().isoformat(),
                            'vulnerabilities': vulnerabilities
                        }
                        self._save_cache()

                        return vulnerabilities

            except Exception as e:
                print(f"Zafiyet arama hatası: {str(e)}")
                return []

    async def scan_technologies(self, technologies: List[Dict]) -> Dict[str, List[Dict]]:
        """Tespit edilen teknolojiler için zafiyet taraması yapar"""
        results = {}
        
        for tech in technologies:
            if tech.get('version') and tech['version'] != 'Bilinmiyor':
                vulnerabilities = await self.search_vulnerabilities(
                    tech['name'],
                    tech['version']
                )
                
                if vulnerabilities:
                    results[tech['name']] = vulnerabilities

        return results 